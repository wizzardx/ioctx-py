name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Add Poetry to PATH on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Add Poetry to PATH on Linux/macOS
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Check Poetry Version
      run: poetry --version

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Format check with Black
      run: |
        poetry run black --check .

    - name: Import sorting check with isort
      run: |
        poetry run isort --check-only --profile black .

    - name: Lint with flake8
      run: |
        poetry run flake8 ioctx tests

    - name: Type check with mypy
      run: |
        poetry run mypy ioctx

    - name: Test with pytest
      run: |
        poetry run pytest

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  publish:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Build package
      run: poetry build

    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: poetry publish
